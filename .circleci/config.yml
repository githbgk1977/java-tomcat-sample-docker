version: 2.1

jobs:
  build:
    docker:
      - image: githbgk/cimg_base2022.09  # Using your specified Docker image
    working_directory: ~/repo

    steps:
      - checkout

      # Install necessary tools like Maven, wget, and curl
      - run:
          name: Install Required Tools
          command: |
            sudo apt-get update
            sudo apt-get install -y maven wget curl

      # Verify the installation of Java
      - run:
          name: Verify Java Installation
          command: java -version

      # Build the application using Maven
      - run:
          name: Build the Application
          command: mvn clean package

      - run:
          name: Upload WAR to JFrog Artifactory
          command: |
            curl -X PUT "https://demojfrog1.jfrog.io/artifactory/tomcatapp/myapp.war" \
            -H "X-JFrog-Art-Api: ${JFROG_TOKEN}" \
            -H "Content-Type: application/java-archive" \
            --data-binary @target/myapp.war

  deploy:
    docker:
      - image: githbgk/cimg_base2022.09  # Using the same Docker image for consistency
    steps:
      # Install necessary tools including OpenJDK and Tomcat
      - run:
          name: Install Required Tools
          command: |
            sudo apt-get update
            sudo apt-get install -y wget openjdk-11-jdk tomcat9  # Install OpenJDK 11 and Tomcat

      - run:
          name: Set JAVA_HOME
          command: |
            echo "export JAVA_HOME=/usr/lib/jvm/java-11-openjdk-amd64" >> $BASH_ENV
            echo "export JRE_HOME=$JAVA_HOME" >> $BASH_ENV
            echo "export PATH=\$PATH:\$JAVA_HOME/bin" >> $BASH_ENV
            source $BASH_ENV  # Source the environment variables

      - run:
          name: Start Tomcat
          command: |
            sudo systemctl start tomcat9  # Start Tomcat using systemctl
          
      - run:
          name: Check Tomcat Logs
          command: |
            sleep 60  # Wait for Tomcat to start
            log_file=$(find /var/log/tomcat9 -name "catalina.out" 2>/dev/null)  # Find the log file
            if [ -n "$log_file" ]; then
              tail -n 50 "$log_file"
            else
              echo "catalina.out not found"
            fi
      - run:
          name: Check Tomcat Status
          command: |
            sleep 5
            curl -f http://localhost:8080 || echo "Tomcat not responding"

workflows:
  version: 2
  build_and_deploy:
    jobs:
      - build
      - deploy:
          requires:
            - build
